/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CJCInfoSystem;

import java.io.*;
import java.io.FileWriter;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author User
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btnCHS = new javax.swing.JButton();
        btnCCIS = new javax.swing.JButton();
        btnCOE = new javax.swing.JButton();
        btnCABE = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTable = new javax.swing.JTable();
        btnCEDAS = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(229, 9, 20));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 40)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("CJC");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 0));
        jLabel2.setText("Student Information");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 0, 0));
        jLabel3.setText("SYSTEM");

        btnAdd.setBackground(new java.awt.Color(204, 0, 0));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("ADD STUDENT");
        btnAdd.setBorderPainted(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(204, 0, 0));
        btnView.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnView.setForeground(new java.awt.Color(255, 255, 255));
        btnView.setText("VIEW STUDENTS");
        btnView.setBorderPainted(false);
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(204, 0, 0));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("SEARCH STUDENT");
        btnSearch.setBorderPainted(false);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(204, 0, 0));
        btnRemove.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setText("REMOVE STUDENT");
        btnRemove.setBorderPainted(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(204, 0, 0));
        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("EXIT");
        btnExit.setBorderPainted(false);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2)))
                .addGap(54, 54, 54)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 0, 0));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(229, 9, 20));
        jLabel4.setText("ADMIN DASHBOARD");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(199, 199, 199)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        btnCHS.setBackground(new java.awt.Color(255, 102, 204));
        btnCHS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCHS.setForeground(new java.awt.Color(255, 255, 255));
        btnCHS.setText("CHS");
        btnCHS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCHSActionPerformed(evt);
            }
        });

        btnCCIS.setBackground(new java.awt.Color(51, 102, 255));
        btnCCIS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCCIS.setForeground(new java.awt.Color(255, 255, 255));
        btnCCIS.setText("CCIS");
        btnCCIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCCISActionPerformed(evt);
            }
        });

        btnCOE.setBackground(new java.awt.Color(255, 102, 0));
        btnCOE.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCOE.setForeground(new java.awt.Color(255, 255, 255));
        btnCOE.setText("COE");
        btnCOE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCOEActionPerformed(evt);
            }
        });

        btnCABE.setBackground(new java.awt.Color(255, 204, 0));
        btnCABE.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCABE.setForeground(new java.awt.Color(255, 255, 255));
        btnCABE.setText("CABE");
        btnCABE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCABEActionPerformed(evt);
            }
        });

        JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        JTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Gender", "ID", "Course", "Department"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(JTable);
        if (JTable.getColumnModel().getColumnCount() > 0) {
            JTable.getColumnModel().getColumn(0).setPreferredWidth(150);
            JTable.getColumnModel().getColumn(1).setResizable(false);
            JTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            JTable.getColumnModel().getColumn(3).setResizable(false);
            JTable.getColumnModel().getColumn(4).setResizable(false);
        }

        btnCEDAS.setBackground(new java.awt.Color(229, 9, 20));
        btnCEDAS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCEDAS.setForeground(new java.awt.Color(255, 255, 255));
        btnCEDAS.setText("CEDAS");
        btnCEDAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCEDASActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnCEDAS, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCHS, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCCIS, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCABE, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCOE, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCOE, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCEDAS, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCHS, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCCIS, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCABE, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCHSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCHSActionPerformed
        // TODO add your handling code here:
        
           try {
                    String filePath = "C://CJC_SIS/AllStudents.txt";
                    File file = new File(filePath);

                    if (!file.exists()) {
                        JOptionPane.showMessageDialog(null, "No student data found.");
                        return;
                    }

                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
                    model.setRowCount(0);

                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] data = line.split(",\t");
                        if (data.length >= 6) {
                            String department = data[5].trim();

                            if (department.equalsIgnoreCase("CHS")) {
                                String fullName = data[0] + " " + data[1];
                                String gender = data[2];
                                String id = data[3];
                                String course = data[4];

                                model.addRow(new Object[]{fullName, gender, id, course, department});
            }
        }
    }

    reader.close();

} catch (IOException e) {
    JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
}
        
    }//GEN-LAST:event_btnCHSActionPerformed

    private void btnCCISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCCISActionPerformed
        // TODO add your handling code here:
        
           try {
                    String filePath = "C://CJC_SIS/AllStudents.txt";
                    File file = new File(filePath);

                    if (!file.exists()) {
                        JOptionPane.showMessageDialog(null, "No student data found.");
                        return;
                    }

                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
                    model.setRowCount(0);

                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] data = line.split(",\t");
                        if (data.length >= 6) {
                            String department = data[5].trim();

                            if (department.equalsIgnoreCase("CCIS")) {
                                String fullName = data[0] + " " + data[1];
                                String gender = data[2];
                                String id = data[3];
                                String course = data[4];

                                model.addRow(new Object[]{fullName, gender, id, course, department});
            }
        }
    }

    reader.close();

} catch (IOException e) {
    JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
}
         
        
    }//GEN-LAST:event_btnCCISActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
         int option = JOptionPane.showOptionDialog(
    null,
    "Are you sure you want to exit the system?:",
    "Confirmation",
    JOptionPane.YES_NO_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null,
    new String[]{"Yes", "Cancel"},
    "Search by ID"
);

if (option == 0) {
this.dispose();
} 
        
        
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnCEDASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCEDASActionPerformed
        // TODO add your handling code here:
        
           try {
                    String filePath = "C://CJC_SIS/AllStudents.txt";
                    File file = new File(filePath);

                    if (!file.exists()) {
                        JOptionPane.showMessageDialog(null, "No student data found.");
                        return;
                    }

                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
                    model.setRowCount(0);

                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] data = line.split(",\t");
                        if (data.length >= 6) {
                            String department = data[5].trim();

                            if (department.equalsIgnoreCase("CEDAS")) {
                                String fullName = data[0] + " " + data[1];
                                String gender = data[2];
                                String id = data[3];
                                String course = data[4];

                                model.addRow(new Object[]{fullName, gender, id, course, department});
            }
        }
    }

    reader.close();

} catch (IOException e) {
    JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
}
        
    }//GEN-LAST:event_btnCEDASActionPerformed

    private void btnCOEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCOEActionPerformed
        // TODO add your handling code here:
        
           try {
                    String filePath = "C://CJC_SIS/AllStudents.txt";
                    File file = new File(filePath);

                    if (!file.exists()) {
                        JOptionPane.showMessageDialog(null, "No student data found.");
                        return;
                    }

                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
                    model.setRowCount(0);

                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] data = line.split(",\t");
                        if (data.length >= 6) {
                            String department = data[5].trim();

                            if (department.equalsIgnoreCase("COE")) {
                                String fullName = data[0] + " " + data[1];
                                String gender = data[2];
                                String id = data[3];
                                String course = data[4];

                                model.addRow(new Object[]{fullName, gender, id, course, department});
            }
        }
    }

    reader.close();

} catch (IOException e) {
    JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
}
        
    }//GEN-LAST:event_btnCOEActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        AddStudent add = new AddStudent();
        add.setVisible(true);
        dispose();   
    }//GEN-LAST:event_btnAddActionPerformed

    
    private void getList(){
        
        
          try {
    String filePath = "C://CJC_SIS/AllStudents.txt";
    File file = new File(filePath);

    if (!file.exists()) {
        JOptionPane.showMessageDialog(null, "No student data found.");
        return;
    }

    BufferedReader reader = new BufferedReader(new FileReader(file));
    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
    model.setRowCount(0); 

    String line;
    while ((line = reader.readLine()) != null) {
        String[] data = line.split(",\t");
        if (data.length >= 6) {
            String fullName = data[0] + " " + data[1];
            String gender = data[2];
            String id = data[3];
            String course = data[4];
            String department = data[5];
            model.addRow(new Object[]{fullName, gender, id, course, department});
        }
    }

    reader.close();

} catch (IOException e) {
    JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
}
        
    }
    
    
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
          try {
    String filePath = "C://CJC_SIS/AllStudents.txt";
    File file = new File(filePath);

    if (!file.exists()) {
        JOptionPane.showMessageDialog(null, "No student data found.");
        return;
    }

    BufferedReader reader = new BufferedReader(new FileReader(file));
    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
    model.setRowCount(0); 

    String line;
    while ((line = reader.readLine()) != null) {
        String[] data = line.split(",\t");
        if (data.length >= 6) {
            String fullName = data[0] + " " + data[1];
            String gender = data[2];
            String id = data[3];
            String course = data[4];
            String department = data[5];
            model.addRow(new Object[]{fullName, gender, id, course, department});
        }
    }

    reader.close();

} catch (IOException e) {
    JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
}
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnCABEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCABEActionPerformed
        // TODO add your handling code here:
        
        
            try {
                    String filePath = "C://CJC_SIS/AllStudents.txt";
                    File file = new File(filePath);

                    if (!file.exists()) {
                        JOptionPane.showMessageDialog(null, "No student data found.");
                        return;
                    }

                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
                    model.setRowCount(0);

                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] data = line.split(",\t");
                        if (data.length >= 6) {
                            String department = data[5].trim();

                            if (department.equalsIgnoreCase("CABE")) {
                                String fullName = data[0] + " " + data[1];
                                String gender = data[2];
                                String id = data[3];
                                String course = data[4];

                                model.addRow(new Object[]{fullName, gender, id, course, department});
            }
        }
    }

    reader.close();

} catch (IOException e) {
    JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
}
        
        
        
    }//GEN-LAST:event_btnCABEActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        
        String searchID = JOptionPane.showInputDialog("Enter Student ID to search:");

    if (searchID == null || searchID.trim().isEmpty()) {
        return; 
    }

    String folderPath = "C://CJC_SIS/";
    File file = new File(folderPath + "AllStudents.txt");

    boolean found = false;

    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(",\\s*"); 
            if (parts.length >= 6) {
                String id = parts[3].trim();
                if (id.equalsIgnoreCase(searchID.trim())) {
                    found = true;
                    String message = "Student Found!\n\n" +
                        "Name: " + parts[0] + " " + parts[1] + "\n" +
                        "Gender: " + parts[2] + "\n" +
                        "ID: " + parts[3] + "\n" +
                        "Course: " + parts[4] + "\n" +
                        "Department: " + parts[5];
                    JOptionPane.showMessageDialog(null, message, "Student Found", JOptionPane.INFORMATION_MESSAGE);
                    break;
                }
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "Student ID not found.", "Not Found", JOptionPane.WARNING_MESSAGE);
        }

    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error reading student records: " + e.getMessage());
    }

        
    }//GEN-LAST:event_btnSearchActionPerformed

    
    private void deleteStudent(String studentID) {
    String basePath = "C://CJC_SIS/";
    String allStudentsFile = basePath + "AllStudents.txt";
    File inputFile = new File(allStudentsFile);
    File tempFile = new File(basePath + "temp.txt");

    try {
        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
        BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

        String line;
        boolean found = false;
        String departmentToDelete = "";

        while ((line = reader.readLine()) != null) {
            String[] data = line.split(",\t");
            if (data.length >= 6 && data[3].trim().equalsIgnoreCase(studentID)) {
                found = true;
                departmentToDelete = data[5].trim();
                continue;
            }
            writer.write(line + System.lineSeparator());
        }

        writer.close();
        reader.close();

        if (found) {
            inputFile.delete();
            tempFile.renameTo(inputFile);
            deleteFromDepartmentFile(studentID, departmentToDelete);
            JOptionPane.showMessageDialog(null, "Student deleted successfully.");
        } else {
            tempFile.delete(); 
            JOptionPane.showMessageDialog(null, "Student ID not found.");
        }

    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error deleting student: " + e.getMessage());
    }
}

    
    private void deleteFromDepartmentFile(String studentID, String department) {
    String filePath = "C://CJC_SIS/" + department + ".txt";
    File inputFile = new File(filePath);
    File tempFile = new File("C://CJC_SIS/temp_" + department + ".txt");

    try {
        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
        BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

        String line;
        while ((line = reader.readLine()) != null) {
            String[] data = line.split(",\t");
            if (data.length >= 4 && !data[3].trim().equalsIgnoreCase(studentID)) {
                writer.write(line + System.lineSeparator());
            }
        }

        writer.close();
        reader.close();

        inputFile.delete();
        tempFile.renameTo(inputFile);

    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error updating " + department + " file: " + e.getMessage());
    }
}

    
    
    
    
    
    
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        
        int option = JOptionPane.showOptionDialog(
    null,
    "Choose a delete method:",
    "Delete Student",
    JOptionPane.YES_NO_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null,
    new String[]{"Search by ID", "Click Table Row"},
    "Search by ID"
);

if (option == 0) {

    String studentID = JOptionPane.showInputDialog("Enter Student ID to delete:");
    if (studentID != null && !studentID.trim().isEmpty()) {
        deleteStudent(studentID.trim());
    }
} else if (option == 1) {
 
    int selectedRow = JTable.getSelectedRow();
    if (selectedRow >= 0) {
        String studentID = JTable.getValueAt(selectedRow, 2).toString(); 
        int confirm = JOptionPane.showConfirmDialog(null, "Delete selected student?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            deleteStudent(studentID);
            ((DefaultTableModel) JTable.getModel()).removeRow(selectedRow);
            
            getList();
            
        }
    } else {
        JOptionPane.showMessageDialog(null, "No student selected in the table.");
    }
}

        
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTable;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCABE;
    private javax.swing.JButton btnCCIS;
    private javax.swing.JButton btnCEDAS;
    private javax.swing.JButton btnCHS;
    private javax.swing.JButton btnCOE;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
